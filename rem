#!/usr/bin/env bash

__REM_VERSION=1.2.2

if command -v tput &> /dev/null && [[ -z "$NO_COLOR" ]]; then
  C_RED=$(tput setaf 1)
  C_GRN=$(tput setaf 2)
  C_YLW=$(tput setaf 3)
  C_BLU=$(tput setaf 4)
  C_RST=$(tput sgr0)
fi

_no_color() {
  C_RED=''
  C_GRN=''
  C_YLW=''
  C_BLU=''
  C_RST=''
}

shopt -s extglob

EPROG=1
EOPTN=2
EFILE=3
EARGS=4

declare STORE_DIR LIST
declare -A B # BINARIES

REM_MAX_REMOVE="${REM_MAX_REMOVE:-20}"

IS_LNX="$([[ "$(uname -s)" =~ Linux ]] && echo 1)"

################## INIT ##################

_init__runtime_vars() {
  [[ "${BASH_VERSINFO[0]}" -lt 4 ]] && _msg_ext "Bash 4+ required" $EPROG
  if [[ -z "$STORE_DIR" ]]; then
    STORE_DIR="$HOME/.recycle"
    mkdir -p "$STORE_DIR"
  else
    STORE_DIR="$("${B[realpath]}" "$STORE_DIR")"
    if [[ ! -d "$STORE_DIR" ]]; then
      _msg_ext "STORE_DIR: $STORE_DIR does not exist" $EFILE
    fi
  fi
  HISTORY_FILE="$STORE_DIR/.rem-history"
  if [[ ! -f "$HISTORY_FILE" ]]; then
    touch "$HISTORY_FILE"
  fi
}

_init__validate_software() {
  for s in "$@"; do
    hash "$s" > /dev/null 2>&1 || _msg_ext "\"$s\" not found on \$PATH" $EPROG
    B["$s"]="$(command -v "$s")"
    { [[ -z $IS_LNX ]] && hash "g$s" > /dev/null 2>&1; } \
      && B["$s"]="$(command -v "g$s")"
  done
}

_init__read_list() {
  LIST="$(< "$HISTORY_FILE")"
}

################## LIB ###################

_msg_ext() {
  if [[ "$REM_QUIET" != 1 ]]; then
    echo -e "${C_RED}$1, exiting...${C_RST}"
  fi
  exit "$2"
}

_msg_prompt() {
  [[ "$REM_QUIET" == 1 ]] && return
  [[ "$REM_AUTO_YES" == 1 ]] && return
  printf "$@"
}

_msg_inf() {
  [[ "$REM_QUIET" == 1 ]] && return
  printf "$@"
}

_sig_recv() {
  _msg_ext "\nSignal recieved" $EPROG
}

_yes_or_no() { # Defaults to 'y' if quietened
  if [[ "$REM_AUTO_YES" == 1 ]]; then
    return
  fi
  if [[ "$REM_QUIET" == 1 ]]; then
    return 1
  fi
  while read -rp "${C_YLW}$1?${C_RST} [yn] "; do
    case "$REPLY" in
      [yY]*) return 0 ;;
      [nN]*) return 1 ;;
      *) echo -e "$C_RED    invalid option ($REPLY)$C_RST" ;;
    esac
    echo -en "\e[1A\e[1A\e[2K"
  done
}

_core_no_args() {
  if [[ $# -eq 0 ]]; then
    func_help
    exit $EARGS
  fi
}

################## LIST ##################

_check_in_list() {
  ${B[grep]} -q -e "^$("${B[realpath]}" "$1")$" <<< "$LIST"
}

_remove_from_list() {
  LIST=$(${B[grep]} -v -e "^$1$" <<< "$LIST")
}

_add_to_list() {
  if ! _check_in_list "$1"; then
    if [[ -z "$LIST" ]]; then
      LIST="$("${B[realpath]}" "$1")"
    else
      LIST="$LIST\n$("${B[realpath]}" "$1")"
    fi
  fi
}

_b64_filename() {
  if [[ -n "$IS_LNX" ]]; then
    ${B[base64]} --wrap 0 <<< "$("${B[realpath]}" "$1")"
  else
    ${B[base64]} <<< "$("${B[realpath]}" "$1")"
  fi
}

################## HISTORY ##################

_write_history_file() {
  echo -e "$LIST" > "$HISTORY_FILE"
}

################## CORE ##################

func_research() {
  _ifs="$IFS"
  IFS=$'\n'
  if _search=($(func_search "$@")); then
    if [[ "${#_search[@]}" == 1 ]] && [[ "${_search[0]}" =~ \[$USER\] ]]; then
      _msg_inf "%s\n" "${_search[0]}"
      return
    fi
    _msg_prompt "%sAbout to restore:%s\n" "$C_YLW" "$C_RST"
    _msg_prompt "  %s\n" "${_search[@]}"
    if _yes_or_no "continue"; then
      func_restore "${_search[@]}"
      _msg_inf "%s\n" "Files restored"
    fi
  fi
  IFS="$_ifs"
}

func_last() {
  _last="$(tail -1 "$HISTORY_FILE")"
  if [[ -z "$_last" ]]; then
    _msg_ext "No last file in history" $EOPTN
  fi
  _msg_inf "%s\n" "${C_YLW}Restore:${C_RST} $_last"
  REM_LAST=1 func_restore "$_last"
}

func_restore() {
  _core_no_args "$@"
  for f in "$@"; do
    [[ -z "$f" ]] && continue
    f=${f#"$STORE_DIR"}
    if ! _check_in_list "$f"; then
      if _check_in_list "$PWD/$f"; then
        f="$PWD/$f"
      else
        echo "$C_YLW\"$f\" not found in $STORE_DIR, continuing...$C_RST"
        continue
      fi
    fi
    if [[ -d "$f" ]]; then
      if [[ "$REM_LAST" == 1 ]] && [[ "$REM_QUIET" == 1 ]] && [[ -z "$REM_AUTO_YES" ]]; then
        return $EFILE
      fi
      _msg_prompt "%s\"%s\" already exists as a directory%s\n" "$C_YLW" "$f" "$C_RST"
      if _yes_or_no "  delete existing \"$f\""; then
        ${B[rm]} -rf -- "$f"
      else
        continue
      fi
    fi
    mv "$STORE_DIR/$(_b64_filename "$f")" "$f"
    _remove_from_list "$("${B[realpath]}" "$f")"
  done
  _write_history_file
}

func_delete() {
  _core_no_args "$@"
  for f in "$@"; do
    f=${f#"$STORE_DIR"}
    file=""
    if ! _check_in_list "$f"; then
      _msg_prompt "%s\"%s\" not found in %s" "$C_YLW" "$f" "$STORE_DIR"
      if [[ ! -e "$f" ]]; then
        _msg_prompt " or relative%s\n" "$C_RST"
        continue
      else
        _msg_prompt "%s\n" "$C_RST"
      fi
      if _yes_or_no "  delete \"$f\" permanently"; then
        file="$f"
      else
        continue
      fi
    else
      _remove_from_list "$("${B[realpath]}" "$f")"
      file="$STORE_DIR/$(_b64_filename "$f")"
    fi
    ${B[rm]} -rf -- "$file"
  done
  _write_history_file
}

func_remove() {
  _core_no_args "$@"
  if [[ "$#" -gt "$((REM_MAX_REMOVE - 1))" ]] \
    && _yes_or_no "Twenty or more files, would you prefer to delete them"; then
    ${B[rm]} -rf -- "$@"
    return
  fi
  for f in "$@"; do
    [[ -z "$f" ]] && continue
    if [[ "$f" == "$STORE_DIR"* ]]; then
      _msg_inf "%s\n" "${C_YLW}Cannot remove file already in $STORE_DIR, continuing...$C_RST"
      continue
    fi
    if [[ -e "$f" || -L "$f" ]]; then
      TO_FILE="$STORE_DIR/$(_b64_filename "$f")"
      [[ -d "$f" ]] && ${B[rm]} -rf -- "$TO_FILE"
      _add_to_list "$f"
      mv "$f" "$TO_FILE"
    else
      _msg_inf "%s\n" "${C_YLW}File \"$f\" does not exist, continuing...$C_RST"
    fi
  done
  _write_history_file
}

func_search() {
  T="$LIST"
  for t in "$@"; do
    T=$(${B[grep]} -e "$t" <<< "$T")
  done
  if [[ -z "$T" ]]; then
    if [[ -z $1 ]]; then
      T="Recycle bin empty [$USER]"
    else
      T="No results [$USER]"
    fi
  fi
  _msg_inf "%s\n" "$T"
}

func_clean() {
  ! _yes_or_no "Are you sure" && _msg_ext "Clean aborted" $EPROG
  { ${B[rm]} -rf -- "$STORE_DIR" && mkdir -p "$STORE_DIR"; } \
    || _msg_ext "Could not remove $STORE_DIR" $EPROG
}

################## MISC ##################

func_help() {
  _msg_inf "%s\n" "rem [--help] (remove|restore|delete|clean|search) [<args>]"
}

#readable_code
func_HELP() {
  cat << EOF >> /dev/stdout

${C_GRN}Rem, a simple recycle bin script; usage:$C_RST

    ${C_YLW}rem ${C_RED}[${C_BLU}(${C_YLW}--help${C_BLU}|${C_YLW}--version${C_BLU}|${C_YLW}--no-colors${C_BLU}|${C_YLW}--quiet${C_BLU}|${C_YLW}--yes${C_BLU})${C_RED}] ${C_RST}\\
        ${C_BLU}(${C_YLW}remove${C_BLU}|${C_YLW}restore${C_BLU}|${C_YLW}research\
${C_BLU}|${C_YLW}delete${C_BLU}|${C_YLW}clean${C_BLU}|${C_YLW}search${C_BLU}|${C_YLW}last${C_BLU}) ${C_RST}\\
        ${C_RED}[${C_BLU}<${C_YLW}args${C_BLU}>${C_RED}]${C_RST}

${C_GRN}Options:${C_RST}

  ${C_YLW}-h${C_BLU}|${C_YLW}--help${C_RST}:      show this help information
  ${C_YLW}-s${C_BLU}|${C_YLW}--version${C_RST}:   show version information
  ${C_YLW}-n${C_BLU}|${C_YLW}--no-colors${C_RST}: disable color output
  ${C_YLW}-y${C_BLU}|${C_YLW}--yes${C_RST}:       disable prompts with 'yes'
  ${C_YLW}-q${C_BLU}|${C_YLW}--quiet${C_RST}:     disable prompts and output (with 'no')

${C_GRN}Subcommands:${C_RST}

  ${C_YLW}remove${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}rm${C_RST}, ${C_YLW}rem${C_RST}, ${C_YLW}remove${C_RST}
    ${C_BLU}desc${C_RST}:    moves specified file(s) to ${C_RED}\$STORE_DIR${C_RST}

  ${C_YLW}restore${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}rs${C_RST}, ${C_YLW}res${C_RST}, ${C_YLW}restore${C_RST}
    ${C_BLU}desc${C_RST}:    restore file(s) from ${C_RED}\$STORE_DIR${C_RST} (args either with or without
             ${C_RED}\$STORE_DIR${C_RST} prefix)

  ${C_YLW}delete${C_RST}:
    ${C_BLU}alias${C_RST}:   ${C_YLW}dl${C_RST}, ${C_YLW}del${C_RST}, ${C_YLW}delte${C_RST}
    ${C_BLU}desc${C_RST}:    delete files from ${C_RED}\$STORE_DIR${C_RST}

  ${C_YLW}search${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}sr${C_RST}, ${C_YLW}sear${C_RST}, ${C_YLW}search${C_RST}
    ${C_BLU}desc${C_RST}:    search files added to ${C_RED}\$STORE_DIR${C_RST}, grep expressions as optional
             args

  ${C_YLW}research${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}rr${C_RST}, ${C_YLW}resear${C_RST}, ${C_YLW}rrch${C_RST}
    ${C_BLU}desc${C_RST}:    restore via search, file(s) from ${C_RED}\$STORE_DIR${C_RST} (args either with or
             without ${C_RED}\$STORE_DIR${C_RST} prefix)

  ${C_YLW}clean${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}cl${C_RST}, ${C_YLW}cln${C_RST}, ${C_YLW}clean${C_RST}
    ${C_BLU}desc${C_RST}:    empty ${C_RED}\$STORE_DIR${C_RST}, you will be prompted for assurance

  ${C_YLW}restore-last${C_RST}:
    ${C_BLU}aliases${C_RST}: ${C_YLW}last${C_RST}
    ${C_BLU}desc${C_RST}:    restore last file in ${C_RED}\$HISTORY_FILE${C_RST}

EOF
}

func_version() {
  _msg_inf "%s\n" "Rem: $__REM_VERSION"
}

func_VERSION() {
  cat << EOF >> /dev/stdout
Copyright Â© 2021 Benjamin Carrington

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <http://www.gnu.org/licenses/>.

Version: $__REM_VERSION
EOF
}

################## MAIN ##################

main() {
  trap _sig_recv SIGINT

  _init__validate_software "realpath" "grep" "base64" "rm"
  _init__runtime_vars
  _init__read_list

  _done_check() {
    [[ -z "$1" && -z "$2" ]] && echo 1
  }

  argv=()
  cmd=
  arg_end=
  [[ $# == 0 ]] && cmd="help"
  while [[ -n "$1" ]]; do
    CHECK=$(_done_check "$cmd" "$arg_end")
    case "$1" in
      --) arg_end=1 ;;
      -*)
        [[ -n "$arg_end" ]] && {
          argv+=("$1")
          break
        }
        break_after_one=true
        [[ "${1:1:1}" != '-' ]] && break_after_one=false
        for ((i = 1; i < "${#1}"; i++)); do
          _arg="${1:$i:1}"
          [[ "$break_after_one" == true ]] && _arg="${1:2}"
          case "$_arg" in
            y | -yes) [[ -z "$arg_end" ]] && REM_AUTO_YES=1 || argv+=("$1") ;;
            q | -quiet) [[ -z "$arg_end" ]] && REM_QUIET=1 || argv+=("$1") ;;
            n | -no-color) [[ -z "$arg_end" ]] && _no_color || argv+=("$1") ;;
            h) [[ -n "$CHECK" ]] && cmd="help" || argv+=("$1") ;;
            H | -help) [[ -n "$CHECK" ]] && cmd="HELP" || argv+=("$1") ;;
            v) [[ -n "$CHECK" ]] && cmd="version" || argv+=("$1") ;;
            V | -version) [[ -n "$CHECK" ]] && cmd="VERSION" || argv+=("$1") ;;
            *) [[ -n "$CHECK" ]] && _msg_ext "Unknown option: $1" $EOPTN || argv+=("$1") ;;
          esac
          [[ "$break_after_one" == true ]] && break
        done
        ;;
      d?(e)l?(ete)) [[ -n "$CHECK" ]] && cmd="delete" || argv+=("$1") ;;
      r?(e)m?(ove)) [[ -n "$CHECK" ]] && cmd="remove" || argv+=("$1") ;;
      r?(e)s?(tore)) [[ -n "$CHECK" ]] && cmd="restore" || argv+=("$1") ;;
      r?(esea)r?(ch)) [[ -n "$CHECK" ]] && cmd="research" || argv+=("$1") ;;
      cl?(ea)?(n)) [[ -n "$CHECK" ]] && cmd="clean" || argv+=("$1") ;;
      s?(ea)r?(ch)) [[ -n "$CHECK" ]] && cmd="search" || argv+=("$1") ;;
      ?(restore-)last) [[ -n "$CHECK" ]] && cmd="last" || argv+=("$1") ;;
      *) argv+=("$1") ;;
    esac
    shift
  done

  if ! type "func_$cmd" >&/dev/null; then
    argv+=("$cmd")
    cmd="remove"
  fi

  "func_$cmd" "${argv[@]}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi

# vim: sw=2 ts=2
